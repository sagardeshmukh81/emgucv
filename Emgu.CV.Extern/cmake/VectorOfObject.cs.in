//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of ${VECTOR_NAME}
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------

${COMPILATION_CONDITION_CS_OPEN}

using System;
using System.Drawing;
using System.Diagnostics;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using Emgu.CV.Structure;

namespace ${NAMESPACE_CS}
{
   /// <summary>
   /// Wrapped class of the C++ standard vector of ${VECTOR_NAME}.
   /// </summary>
   [Serializable]
   [DebuggerTypeProxy(typeof(VectorOf${VECTOR_NAME}.DebuggerProxy))]
   public partial class VectorOf${VECTOR_NAME} : Emgu.Util.UnmanagedObject, IInputOutputArray
   {
      private readonly bool _needDispose;
   
      static VectorOf${VECTOR_NAME}()
      {
         CvInvoke.Init();
      }

      /// <summary>
      /// Create an empty standard vector of ${VECTOR_NAME}
      /// </summary>
      public VectorOf${VECTOR_NAME}()
         : this(VectorOf${VECTOR_NAME}Create(), true)
      {
      }
	  
      internal VectorOf${VECTOR_NAME}(IntPtr ptr, bool needDispose)
      {
         _ptr = ptr;
         _needDispose = needDispose;
      }

      /// <summary>
      /// Create an standard vector of ${VECTOR_NAME} of the specific size
      /// </summary>
      /// <param name="size">The size of the vector</param>
      public VectorOf${VECTOR_NAME}(int size)
         : this( VectorOf${VECTOR_NAME}CreateSize(size), true)
      {
      }
	  
      /// <summary>
      /// Create an standard vector of ${VECTOR_NAME} with the initial values
      /// </summary>
      /// <param name="values">The initial values</param>
	  public VectorOf${VECTOR_NAME}(params ${VECTOR_ELEMENT_CS}[] values)
	    : this()
	  {
        Push(values);
	  }

      /// <summary>
      /// Get the size of the vector
      /// </summary>
      public int Size
      {
         get
         {
            return VectorOf${VECTOR_NAME}GetSize(_ptr);
         }
      }

      /// <summary>
      /// Clear the vector
      /// </summary>
      public void Clear()
      {
         VectorOf${VECTOR_NAME}Clear(_ptr);
      }
	  
	   /// <summary>
      /// Push a value into the standard vector
      /// </summary>
      /// <param name="value">The value to be pushed to the vector</param>
      public void Push(${VECTOR_ELEMENT_CS} value)
      {
         VectorOf${VECTOR_NAME}Push(_ptr, value.Ptr);
      }

      /// <summary>
      /// Push multiple values into the standard vector
      /// </summary>
      /// <param name="values">The values to be pushed to the vector</param>
      public void Push(${VECTOR_ELEMENT_CS}[] values)
      {
         foreach (${VECTOR_ELEMENT_CS} value in values)
            Push(value);
      }

      /// <summary>
      /// Push multiple values from the other vector into this vector
      /// </summary>
      /// <param name="other">The other vector, from which the values will be pushed to the current vector</param>
      public void Push(VectorOf${VECTOR_NAME} other)
      {
         VectorOf${VECTOR_NAME}PushVector(_ptr, other);
      }
      
	   /// <summary>
      /// Get the item in the specific index
      /// </summary>
      /// <param name="index">The index</param>
      /// <returns>The item in the specific index</returns>
      public ${VECTOR_ELEMENT_CS} this[int index]
      {
         get
         {
		    IntPtr itemPtr = IntPtr.Zero;
            VectorOf${VECTOR_NAME}GetItemPtr(_ptr, index, ref itemPtr);
            return new ${VECTOR_ELEMENT_CS}(itemPtr, false);
         }
      }

      /// <summary>
      /// Release the standard vector
      /// </summary>
      protected override void DisposeObject()
      {
         if (_needDispose && _ptr != IntPtr.Zero)
            VectorOf${VECTOR_NAME}Release(ref _ptr);
      }

      /// <summary>
      /// Get the pointer to cv::_InputArray
      /// </summary>
      /// <returns>The input array</returns>
      public InputArray GetInputArray()
      {
        return new InputArray( cveInputArrayFromVectorOf${VECTOR_NAME}(_ptr), this );
      }
	  
      /// <summary>
      /// Get the pointer to cv::_OutputArray
      /// </summary>
      /// <returns>The output array</returns>
      public OutputArray GetOutputArray()
      {
         return new OutputArray( cveOutputArrayFromVectorOf${VECTOR_NAME}(_ptr), this );
      }

      /// <summary>
      /// Get the pointer to cv::_InputOutputArray
      /// </summary>
      /// <returns>The input output array</returns>
      public InputOutputArray GetInputOutputArray()
      {
         return new InputOutputArray( cveInputOutputArrayFromVectorOf${VECTOR_NAME}(_ptr), this );
      }     
      
      /// <summary>
      /// The size of the item in this Vector, counted as size in bytes.
      /// </summary>
      public static int SizeOfItemInBytes
      {
         get { return VectorOf${VECTOR_NAME}SizeOfItemInBytes(); }
      }

#if ${IS_VECTOR_OF_VECTOR}
      /// <summary>
      /// Create the standard vector of ${VECTOR_NAME} 
      /// </summary>
	  /// <param name="values">The values to be pushed to the vector</param>
      public VectorOf${VECTOR_NAME}(${ELEMENT_OF_ELEMENT}[][] values)
         : this()
      {
         using (${VECTOR_NAME} v = new ${VECTOR_NAME}())
         {
            for (int i = 0; i < values.Length; i++)
            {
               v.Push(values[i]);
               Push(v);
               v.Clear();
            }
         }
      }
	  
	   /// <summary>
      /// Convert the standard vector to arrays of int
      /// </summary>
      /// <returns>Arrays of int</returns>
      public ${ELEMENT_OF_ELEMENT}[][] ToArrayOfArray()
      {
         int size = Size;
         ${ELEMENT_OF_ELEMENT}[][] res = new ${ELEMENT_OF_ELEMENT}[size][];
         for (int i = 0; i < size; i++)
         {
            using (${VECTOR_NAME} v = this[i])
            {
               res[i] = v.ToArray();
            }
         }
         return res;
      }
#endif

      internal class DebuggerProxy
      {
         private VectorOf${VECTOR_NAME} _v;

         public DebuggerProxy(VectorOf${VECTOR_NAME} v)
         {
            _v = v;
         }

#if ${IS_VECTOR_OF_VECTOR}
         public ${ELEMENT_OF_ELEMENT}[][] Values
         {
            get { return _v.ToArrayOfArray(); }
         }
#else
		 public ${VECTOR_ELEMENT_CS}[] Values
         {
			get
			{
			   ${VECTOR_ELEMENT_CS}[] result = new ${VECTOR_ELEMENT_CS}[_v.Size];
			   for (int i = 0; i < result.Length; i++)
			   {
				  result[i] = _v[i];
			   }
			   return result;
			}
         }
#endif
      }


      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr VectorOf${VECTOR_NAME}Create();

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr VectorOf${VECTOR_NAME}CreateSize(int size);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}Release(ref IntPtr v);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern int VectorOf${VECTOR_NAME}GetSize(IntPtr v);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}Push(IntPtr v, IntPtr value);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}PushVector(IntPtr ptr, IntPtr otherPtr);
      
      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}Clear(IntPtr v);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern void VectorOf${VECTOR_NAME}GetItemPtr(IntPtr vec, int index, ref IntPtr element);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern int VectorOf${VECTOR_NAME}SizeOfItemInBytes();

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr cveInputArrayFromVectorOf${VECTOR_NAME}(IntPtr vec);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr cveOutputArrayFromVectorOf${VECTOR_NAME}(IntPtr vec);

      [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
      internal static extern IntPtr cveInputOutputArrayFromVectorOf${VECTOR_NAME}(IntPtr vec);
   }
}

${COMPILATION_CONDITION_CS_CLOSE}