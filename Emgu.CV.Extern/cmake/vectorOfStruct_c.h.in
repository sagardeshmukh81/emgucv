//----------------------------------------------------------------------------
//
//  Copyright (C) 2004-2021 by EMGU Corporation. All rights reserved.
//
//  Vector of ${VECTOR_NAME}
//
//  This file is automatically generated, do not modify.
//----------------------------------------------------------------------------


#pragma once
#ifndef EMGU_VECTOR_${VECTOR_NAME}_H
#define EMGU_VECTOR_${VECTOR_NAME}_H

#include "vectors_c.h"

${COMPILATION_CONDITION_C_OPEN}

${VECTOR_ADDITIONAL_INCLUDE}

//----------------------------------------------------------------------------
//
//  Vector of ${VECTOR_NAME}
//
//----------------------------------------------------------------------------
CVAPI(std::vector< ${VECTOR_ELEMENT} >*) VectorOf${VECTOR_NAME}Create();

CVAPI(std::vector< ${VECTOR_ELEMENT} >*) VectorOf${VECTOR_NAME}CreateSize(int size);

CVAPI(int) VectorOf${VECTOR_NAME}GetSize(std::vector< ${VECTOR_ELEMENT} >* v);

CVAPI(void) VectorOf${VECTOR_NAME}Push(std::vector< ${VECTOR_ELEMENT} >* v, ${VECTOR_ELEMENT}* value);

CVAPI(void) VectorOf${VECTOR_NAME}PushMulti(std::vector< ${VECTOR_ELEMENT} >* v, ${VECTOR_ELEMENT}* values, int count);

CVAPI(void) VectorOf${VECTOR_NAME}PushVector(std::vector< ${VECTOR_ELEMENT} >* v, std::vector< ${VECTOR_ELEMENT} >* other);

CVAPI(void) VectorOf${VECTOR_NAME}Clear(std::vector< ${VECTOR_ELEMENT} >* v);

CVAPI(void) VectorOf${VECTOR_NAME}Release(std::vector< ${VECTOR_ELEMENT} >** v);

CVAPI(void) VectorOf${VECTOR_NAME}CopyData(std::vector< ${VECTOR_ELEMENT} >* v,  ${VECTOR_ELEMENT}* data);

CVAPI(${VECTOR_ELEMENT}*) VectorOf${VECTOR_NAME}GetStartAddress(std::vector< ${VECTOR_ELEMENT} >* v);

CVAPI(void) VectorOf${VECTOR_NAME}GetItem(std::vector<  ${VECTOR_ELEMENT} >* vec, int index,  ${VECTOR_ELEMENT}* element);

CVAPI(void) VectorOf${VECTOR_NAME}GetItemPtr(std::vector<  ${VECTOR_ELEMENT} >* vec, int index,  ${VECTOR_ELEMENT}** element);

#if ${IS_INPUT_OUTPUT_ARRAY}
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOf${VECTOR_NAME}(std::vector< ${VECTOR_ELEMENT} >* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOf${VECTOR_NAME}(std::vector< ${VECTOR_ELEMENT} >* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOf${VECTOR_NAME}(std::vector< ${VECTOR_ELEMENT} >* vec);
#endif

CVAPI(int) VectorOf${VECTOR_NAME}SizeOfItemInBytes();

#else

CVAPI(void*) VectorOf${VECTOR_NAME}Create();

CVAPI(void*) VectorOf${VECTOR_NAME}CreateSize(int size);

CVAPI(int) VectorOf${VECTOR_NAME}GetSize(void* v);

CVAPI(void) VectorOf${VECTOR_NAME}Push(void* v, void* value);

CVAPI(void) VectorOf${VECTOR_NAME}PushMulti(void* v, void* values, int count);

CVAPI(void) VectorOf${VECTOR_NAME}PushVector(void* v, void* other);

CVAPI(void) VectorOf${VECTOR_NAME}Clear(void* v);

CVAPI(void) VectorOf${VECTOR_NAME}Release(void** v);

CVAPI(void) VectorOf${VECTOR_NAME}CopyData(void* v,  void* data);

CVAPI(void*) VectorOf${VECTOR_NAME}GetStartAddress(void* v);

CVAPI(void) VectorOf${VECTOR_NAME}GetItem(void* vec, int index, void* element);

CVAPI(void) VectorOf${VECTOR_NAME}GetItemPtr(void* vec, int index, void** element);

#if ${IS_INPUT_OUTPUT_ARRAY}
CVAPI(cv::_InputArray*) cveInputArrayFromVectorOf${VECTOR_NAME}(void* vec);

CVAPI(cv::_OutputArray*) cveOutputArrayFromVectorOf${VECTOR_NAME}(void* vec);

CVAPI(cv::_InputOutputArray*) cveInputOutputArrayFromVectorOf${VECTOR_NAME}(void* vec);
#endif

CVAPI(int) VectorOf${VECTOR_NAME}SizeOfItemInBytes();


${COMPILATION_CONDITION_C_CLOSE}

#endif
